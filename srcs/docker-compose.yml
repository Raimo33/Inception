#TODO capire se FTPD deve essere accessibile dalla porta 443 e da nginx

services:

  mariadb:
    build:
      context: ./requirements/mariadb
      dockerfile: Dockerfile
      args:
        - DB_NAME=${DB_NAME}
        - DB_USER=${DB_USER}
        - DB_PASSWORD=${DB_PASSWORD}
        - USER_ID=${MARIADB_USER_UID}
    container_name: mariadb
    volumes:
      - mariadb_data:/var/lib/mysql
      - mariadb_logs:/var/log
    ports:
      - "3307:3307"
    networks:
      - backend
    restart: always
    init: true

  nginx:
    build:
      context: ./requirements/nginx
      dockerfile: Dockerfile
      args:
        - USER_ID=${NGINX_USER_UID}
        - GROUP_ID1=${WORDPRESS_GROUP_GID}
    container_name: nginx
    volumes:
      - wordpress_data:/var/www/html/wordpress:ro
      - adminer_data:/var/www/html/adminer:ro
      - ./requirements/portfolio:/var/www/html/portfolio:ro
      - nginx_logs:/var/log
    ports:
      - "443:443"
    networks:
      - backend
    restart: always
    depends_on:
      - mariadb
    init: true

  wordpress:
    build:
      context: ./requirements/wordpress
      dockerfile: Dockerfile
      args:
        - USER_ID=${WORDPRESS_USER_UID}
        - GROUP_ID1=${WORDPRESS_GROUP_GID}
        - DB_HOST=${DB_HOST}
        - DB_NAME=${DB_NAME}
        - DB_USER=${DB_USER}
        - DB_PASSWORD=${DB_PASSWORD}
    container_name: wordpress
    environment:
      - DB_HOST=${DB_HOST}
      - WORDPRESS_URL=${WORDPRESS_URL}
      - WORDPRESS_USER=${WORDPRESS_USER}
      - WORDPRESS_USER_PASSWORD=${WORDPRESS_USER_PASSWORD}
      - WORDPRESS_USER_EMAIL=${WORDPRESS_USER_EMAIL}
      - WORDPRESS_SUPERUSER=${WORDPRESS_SUPERUSER}
      - WORDPRESS_SUPERUSER_PASSWORD=${WORDPRESS_SUPERUSER_PASSWORD}
      - WORDPRESS_SUPERUSER_EMAIL=${WORDPRESS_SUPERUSER_EMAIL}
    volumes:
      - wordpress_data:/var/www/html/wordpress
      - wordpress_logs:/var/log
    ports:
      - "9000:9000"
    networks:
      - backend
    restart: always
    depends_on:
      - nginx
      - mariadb
    init: true

  redis:
    build:
      context: ./requirements/redis
      dockerfile: Dockerfile
      args:
        - USER_ID=${REDIS_USER_UID}
    container_name: redis
    volumes:
      - redis_logs:/var/log
    ports:
      - "6379:6379"
    networks:
      - backend
    restart: always
    depends_on:
      - wordpress
    init: true

  vsftpd:
    build:
      context: ./requirements/vsftpd
      dockerfile: Dockerfile
      args:
        - USER_ID=${VSFTPD_USER_UID}
        - GROUP_ID1=${WORDPRESS_GROUP_GID}
    container_name: vsftpd
    volumes:
      - wordpress_data:/var/www/html/wordpress
      - vsftpd_logs:/var/log
    ports:
      - "21:21"
      - "20:20"
      - "21000-21010:21000-21010"
    networks:
      - backend
    restart: always
    depends_on:
      - wordpress
    init: true

  adminer:
    build:
      context: ./requirements/adminer
      dockerfile: Dockerfile
      args:
        - USER_ID=${ADMINER_USER_UID}
    container_name: adminer
    volumes:
      - adminer_data:/var/www/html/adminer
      - adminer_logs:/var/log
    ports:
      - "8080:8080"
    networks:
      - backend
    restart: always
    depends_on:
      - nginx
      - mariadb
    init: true

volumes:

  mariadb_data:
    driver: local
    driver_opts:
      type: none
      device: ${DATA_DIR}/mariadb
      o: bind
  wordpress_data:
    driver: local
    driver_opts:
      type: none
      device: ${DATA_DIR}/wordpress
      o: bind
  adminer_data:

  mariadb_logs:
    driver: local
    driver_opts:
      type: none
      device: ${LOGS_DIR}/mariadb
      o: bind
  nginx_logs:
    driver: local
    driver_opts:
      type: none
      device: ${LOGS_DIR}/nginx
      o: bind
  wordpress_logs:
    driver: local
    driver_opts:
      type: none
      device: ${LOGS_DIR}/wordpress
      o: bind
  redis_logs:
    driver: local
    driver_opts:
      type: none
      device: ${LOGS_DIR}/redis
      o: bind
  vsftpd_logs:
    driver: local
    driver_opts:
      type: none
      device: ${LOGS_DIR}/vsftpd
      o: bind
  adminer_logs:
    driver: local
    driver_opts:
      type: none
      device: ${LOGS_DIR}/adminer
      o: bind

networks:
  backend:
    name: backend
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.1.0/28
